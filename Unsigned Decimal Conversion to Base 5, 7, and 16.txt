[INSTRUCTION]
Create a program that converts an unsigned decimal (base 10) integer to quinary (base 5),
septenary (base 7), and hexadecimal values.

(a) Display the quinary, septenary, and hexadecimal values of the input integer.
(b) Hard code the unsigned input integer with a size of 32 bits.


[SOLUTION]
section .data
    num dd 13965
    newline db 0xa
    
    arr5 TIMES 100 db 0
    arr7 TIMES 100 db 0
    arr16 TIMES 100 db 0
    
    string db 'Decimal to Quinary, Septenary, and Hexadecimal', 0xa, '(From top to bottom)', 0xa, 0xa
    stringlen equ $ - string
    
section .bss
    output resb 1
    
section .text
    global _start                 
    
_start: 
;TITLE
    mov edx, stringlen        
    mov ecx, string
    mov ebx,1
    mov eax,4
    int 0x80
    
;CLEAR THE REGISTERS
    mov eax, 0
    mov ebx, 0
    mov ecx, 0
    mov edx, 0


;QUINARY -----------------------------
    mov ebp, arr5           ;point to the current address of array
    mov edi, [num]          ;store the input to a temporary register

conversion:
    mov eax, edi            ;store the input to a 32-bit register dividend
    mov ecx, 5              ;store the "base number" to a 32-bit register as the divisor
    div ecx                 ;divide the input and store the remainder at edx
    
    mov [ebp], edx          ;store the remainder as the first element of an array (repeat)
    add ebp, 1              ;increment the pointer of the array
    inc esi                 ;increment the counter on how many elements were stored
    mov edi, eax            ;store the new quotient to the temporary register
    
    mov edx, 0              ;clear the remainder register
    cmp edi, 0              ;compare if the quotient is already zero
    jnz conversion          ;loop again if not yet zero

reverse:
    sub ebp, 1              ;point to the last stored element of the array
    mov esp, [ebp]          ;store the current element to a register
    
    add esp, 48             ;convert to digit
    mov [output], esp       ;store the digit to the output variable
    
    mov edx, 1              ;print
    mov ecx, output
    mov ebx, 1
    mov eax, 4
    int 0x80
    
    dec esi                 ;decrement counter to know if it reached the very first element
    cmp esi, 0              ;compare if the counter is zero
    jnz reverse             ;if counter not 0, then loop again

;NEW LINE
    mov ecx, newline
    mov edx, 1
    mov ebx, 1
    mov eax, 4
    int 0x80

;CLEAR THE REGISTERS
    mov eax, 0
    mov ebx, 0
    mov ecx, 0
    mov edx, 0
    mov esi, 0
    mov esp, 0
    mov edi, 0
    mov ebp, 0


;SEPTENARY -----------------------------
    mov  ebp, arr7          ;point to the current address of array
    mov  esi, 0             ;counter
    
    mov edx, 0              ;clear edx for remainder
    mov edi, [num]          ;store the input to a temporary register
    
conversion2:
    mov eax, edi            ;store the input to a 32-bit register dividend
    mov ecx, 7              ;store the "base number" to a 32-bit register as the divisor
    div ecx                 ;divide the input and store the remainder at edx
    
    mov [ebp], edx          ;store the remainder as the first element of an array (repeat)
    add ebp, 1              ;increment the pointer of the array
    inc esi                 ;increment the counter on how many elements were stored
    mov edi, eax            ;store the new quotient to the temporary register
    
    mov edx, 0              ;clear the remainder register
    cmp edi, 0              ;compare if the quotient is already zero
    jnz conversion2         ;loop again if not yet zero
    
reverse2:
    sub ebp, 1              ;point to the last stored element of the array
    mov esp, [ebp]          ;store the current element to a register
    
    add esp, 48             ;convert to digit
    mov [output], esp       ;store the digit to the output variable
    
    mov edx, 1              ;print
    mov ecx, output
    mov ebx, 1
    mov eax, 4
    int 0x80
    
    dec esi                 ;decrement counter to know if it reached the very first element
    cmp esi, 0              ;compare if the counter is zero
    jnz reverse2            ;if counter not 0, then loop again

;NEW LINE
    mov ecx, newline
    mov edx, 1
    mov ebx, 1
    mov eax, 4
    int 0x80

;CLEAR THE REGISTERS
    mov eax, 0
    mov ebx, 0
    mov ecx, 0
    mov edx, 0
    mov esi, 0
    mov esp, 0
    mov edi, 0
    mov ebp, 0


;HEXADEXIMAL -----------------------------
    mov ebp, arr16          ;point to the current address of array
    mov edi, [num]          ;store the input to a temporary register

conversion3:
    mov eax, edi            ;store the input to a 32-bit register dividend
    mov ecx, 16             ;store the "base number" to a 32-bit register as the divisor
    div ecx                 ;divide the input and store the remainder at edx
    
    mov [ebp], edx          ;store the remainder as the first element of an array (repeat)
    add ebp, 1              ;increment the pointer of the array
    inc esi                 ;increment the counter on how many elements were stored
    mov edi, eax            ;store the new quotient to the temporary register
    
    mov edx, 0              ;clear the remainder register
    cmp edi, 0              ;compare if the quotient is already zero
    jnz conversion3         ;loop again if not yet zero

reverse3:
    sub ebp, 1              ;point to the last stored element of the array
    mov ah, [ebp]          ;store the current element to a register
    
    cmp ah, 9
    ja letters
    
    add ah, 48             ;convert to digit
    mov [output], ah       ;store the digit to the output variable
    
    mov edx, 1              ;print
    mov ecx, output
    mov ebx, 1
    mov eax, 4
    int 0x80
    jmp looper
        
letters:
    add ah, 55             ;convert to letter
    mov [output], ah       ;store the digit to the output variable
    
    mov edx, 1              ;print
    mov ecx, output
    mov ebx, 1
    mov eax, 4
    int 0x80
    
looper:
    dec esi                 ;decrement counter to know if it reached the very first element
    cmp esi, 0              ;compare if the counter is zero
    jnz reverse3            ;if counter not 0, then loop again
    
exit:
    mov eax, 1     
    int 0x80



